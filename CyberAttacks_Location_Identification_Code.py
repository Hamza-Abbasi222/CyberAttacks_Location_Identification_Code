# -*- coding: utf-8 -*-
"""anamavar / Location_identification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q9K6byA0vTXZ-axmxIFOP9fY8__uED4P
"""

#paper Link https://ieeexplore.ieee.org/document/9645267/
#SWat and IoT Data set requested from "https://itrust.sutd.edu.sg/"

import numpy as np
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, Dropout,Flatten
from sklearn.model_selection import train_test_split
from matplotlib import pyplot
import matplotlib.pyplot as plt
from sklearn.metrics import auc, roc_curve
from sklearn import metrics
from sklearn.metrics import precision_recall_fscore_support
import pandas as pd
from pandas import DataFrame as df
from keras.callbacks import ModelCheckpoint
from keras import backend
import pylab

from tensorflow.keras import Model, Sequential, Input
from tensorflow.keras.utils import to_categorical
from sklearn import preprocessing
# import seaborn as sn
import scipy
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import precision_score, recall_score, f1_score
from keras.utils.vis_utils import plot_model
from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from keras.callbacks import TensorBoard
import tensorflow as tf
from sklearn.svm import SVC
from sklearn.datasets import load_iris
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold # import KFold
from sklearn.decomposition import PCA
from sklearn.metrics import jaccard_score
from imblearn.metrics import geometric_mean_score
from sklearn.metrics import matthews_corrcoef
from sklearn.svm import LinearSVC
from sklearn.svm import SVR

# Functions

def AE(data,rep=2048, batch=2048,do=0.5):

    input_X= Input(shape=(data.shape[1],))
    input_S=Dropout(do)(input_X)
    encoded = Dense(units=rep, activation='relu')(input_S)
#     encoded = Dense(units=1024, activation='relu')(encoded)
#     encoded = Dense(units=32, activation='relu')(encoded)
#     encoded = Dense(units=rep, activation='relu')(encoded)
#     encoded = Dense(units=32, activation='relu')(encoded)
#     decoded = Dense(units=512, activation='relu')(encoded)
    decoded = Dense(units=rep, activation='relu')(encoded)
    decoded = Dense(units=data.shape[1], activation='relu')(decoded)

    autoencoder=Model(input_X, decoded)
    autoencoder.compile(optimizer='adam', loss='mse', metrics=['mse'])
    autoencoder.fit(data, data,
                epochs=5,
                batch_size=batch,
                shuffle=True)

    model=Sequential()
    model.add(autoencoder.layers[0])
    model.add(autoencoder.layers[1])
#     model.add(autoencoder.layers[2])
#     model.add(autoencoder.layers[3])
#     model.add(autoencoder.layers[4])


    return model

def getFeatures(data,model):
    X=model.predict(data)
    return X

def change_to_int(df, c):
    df=pd.DataFrame(df)
    u=df[c].unique()
    for i in u:
        df.loc[df[c]==i,[c]]=np.where(u==i)
    return df

def Set1_Neural_Network(X,Y,XV,YV,epochs=5,batch_size=2048):
    model=Sequential()
    model.add(Dense(2048,input_dim=input_rep,activation='relu',kernel_initializer='random_uniform',bias_initializer='ones'))
    model.add(Dense(1024,activation='relu'))
    model.add(Dense(512,activation='relu'))
    model.add(Dense(2,activation='sigmoid'))
    filepath="weights.best.org.hdf5"
    checkpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='max')
    earlystop_callback = tf.keras.callbacks.EarlyStopping(monitor='val_acc', min_delta=0.000001,patience=5)
    callbacks = [checkpoint]
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    history=model.fit(X , Y, epochs=epochs, batch_size=batch_size, shuffle=True,callbacks=callbacks, validation_data=(XV, YV))
    return model

def Set2_Neural_Network(X,Y,XV,YV,epochs=5,batch_size=2048):
    model=Sequential()
    model.add(Dense(2048,input_dim=input_rep,activation='relu',kernel_initializer='random_uniform',bias_initializer='ones'))
    model.add(Dense(1024,activation='relu'))
    model.add(Dense(512,activation='relu'))
    model.add(Dense(2,activation='sigmoid'))
    filepath="weights.best.org.hdf5"
    checkpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='max')
    earlystop_callback = tf.keras.callbacks.EarlyStopping(monitor='val_acc', min_delta=0.000001,patience=5)
    callbacks = [checkpoint]
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    history=model.fit(X , Y, epochs=epochs, batch_size=batch_size, shuffle=True,callbacks=callbacks, validation_data=(XV, YV))
    return model

def Final_Neural_Network(X,Y,XV,YV,epochs=5,batch_size=64):
    model=Sequential()
    model.add(Dense(128,input_dim=input_fin,activation='relu',kernel_initializer='random_uniform',bias_initializer='ones'))
    model.add(Dense(64,activation='relu'))
    model.add(Dense(32,activation='relu'))
    model.add(Dropout(0.5))
    model.add(Flatten())
    model.add(Dense(2,activation='sigmoid'))

    filepath="weights.best.org.hdf5"
    checkpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='max')
    earlystop_callback_loss = tf.keras.callbacks.EarlyStopping(monitor=('loss'), min_delta=0.000001, verbose=5)
    earlystop_callback_accuracy = tf.keras.callbacks.EarlyStopping(monitor=('accuracy'), min_delta=0.000001, verbose=5)
    callbacks = [checkpoint,earlystop_callback_loss,earlystop_callback_accuracy]

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    history=model.fit(X , Y, epochs=epochs, batch_size=batch_size, shuffle=True,callbacks=callbacks, validation_data=(XV, YV))
    return model
def Basic_Neural_Network(X,Y,XV,YV,epochs=5,batch_size=1024):
    model=Sequential()
    model.add(Dense(512,activation='relu'))
    model.add(Dense(256,activation='relu'))
    model.add(Dense(2,activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    history=model.fit(X , Y, epochs=epochs, batch_size=batch_size, shuffle=True, validation_data=(XV, YV))
    return model

# def DT_Classifier(X,Y):
#     model = DecisionTreeClassifier(random_state=0)
#     model = model.fit(X, Y)
#     return model

def RF_Classifier(X,Y):
    model = RandomForestClassifier(n_estimators=30, max_depth=4,random_state=0)
    model = model.fit(X, Y)
    return model

#IMPORT FILES FROM DRIVE INTO GOOGLE-COLAB:

#STEP-1: Import Libraries

# Code to read csv file into colaboratory:
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

#STEP-2: Autheticate E-Mail ID

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

'''
# STEP-3: Get File from Drive using file-ID
#https://docs.google.com/spreadsheets/d/1QCJlRzjf9Gx-IRHnpMcf_cs-9WKzWSFr/edit?usp=share_link&ouid=111055208197152850127&rtpof=true&sd=true
#2.1 Get the file
downloaded = drive.CreateFile({'id':'111055208197152850127&rtpof'}) # replace the id with id of file you want to access
downloaded.GetContentFile('SWaT_dataset_Jul.csv')
'''

'''
STEP-4: Read File

#3.1 Read file as panda dataframe
import pandas as pd
xyz = pd.read_csv('resources.csv')
print(xyz.head(1))

#Repeat STEPs 3 & 4 to load as many files as you require.
'''

#MAIN CODE

from google.colab import drive
drive.mount('/content/drive')
# dataset_power_1= pd.read_csv('/content/drive/MyDrive/ML on Cyber Security Dataset/1st dataset _ Large-scale Urban IoT Activity Data for DDoS Attack/Urban_IoT_DDoS_Data-main/dataset/original_data.csv')

df = pd.read_excel('/content/drive/MyDrive/SWaT.A1 & A2_Dec 2015/Physical/SWaT_Dataset_Attack_v0.xlsx')
#Rplace values
df['marker'].mask(df['marker'] == 1, 0, inplace=True)
df['marker'].mask(df['marker'] == 2, 0, inplace=True)
df['marker'].mask(df['marker'] == 3, 0, inplace=True)
df['marker'].mask(df['marker'] == 4, 0, inplace=True)
df['marker'].mask(df['marker'] == 5, 0, inplace=True)
df['marker'].mask(df['marker'] == 6, 0, inplace=True)
df['marker'].mask(df['marker'] == 7, 0, inplace=True)
df['marker'].mask(df['marker'] == 8, 0, inplace=True)
df['marker'].mask(df['marker'] == 9, 0, inplace=True)
df['marker'].mask(df['marker'] == 10, 0, inplace=True)

df['marker'].mask(df['marker'] == 11, 0, inplace=True)
df['marker'].mask(df['marker'] == 12, 0, inplace=True)
df['marker'].mask(df['marker'] == 13, 0, inplace=True)
df['marker'].mask(df['marker'] == 14, 0, inplace=True)
df['marker'].mask(df['marker'] == 15, 0, inplace=True)
df['marker'].mask(df['marker'] == 16, 0, inplace=True)
df['marker'].mask(df['marker'] == 17, 0, inplace=True)
df['marker'].mask(df['marker'] == 18, 0, inplace=True)
df['marker'].mask(df['marker'] == 19, 0, inplace=True)
df['marker'].mask(df['marker'] == 20, 0, inplace=True)

df['marker'].mask(df['marker'] == 21, 0, inplace=True)
df['marker'].mask(df['marker'] == 22, 0, inplace=True)
df['marker'].mask(df['marker'] == 23, 0, inplace=True)
df['marker'].mask(df['marker'] == 24, 0, inplace=True)
df['marker'].mask(df['marker'] == 25, 0, inplace=True)
df['marker'].mask(df['marker'] == 26, 0, inplace=True)
df['marker'].mask(df['marker'] == 27, 0, inplace=True)
df['marker'].mask(df['marker'] == 28, 0, inplace=True)
df['marker'].mask(df['marker'] == 29, 0, inplace=True)
df['marker'].mask(df['marker'] == 30, 0, inplace=True)

df['marker'].mask(df['marker'] == 31, 0, inplace=True)
df['marker'].mask(df['marker'] == 32, 0, inplace=True)
df['marker'].mask(df['marker'] == 33, 0, inplace=True)
df['marker'].mask(df['marker'] == 34, 0, inplace=True)
df['marker'].mask(df['marker'] == 35, 0, inplace=True)
df['marker'].mask(df['marker'] == 36, 0, inplace=True)
df['marker'].mask(df['marker'] == 37, 0, inplace=True)
df['marker'].mask(df['marker'] == 38, 0, inplace=True)
df['marker'].mask(df['marker'] == 39, 0, inplace=True)
df['marker'].mask(df['marker'] == 40, 0, inplace=True)

df['marker'].mask(df['marker'] == 40, 0, inplace=True)

# df.to_csv("test.csv", index=True)
df

df = pd.read_csv("dataset_power_1.csv", index_col ="marker" )


df['marker'].mask(df['marker'] == 40, 0, inplace=True)
# df.drop([1,2,3,4,5,6,13,14,41], inplace = True)
# df.to_csv("test.csv", index=True)
df

# importing pandas as pd
import pandas as pd

# Making data frame from the csv file
df = pd.read_csv("dataset_power_1.csv", index_col ="marker" )

# dropping normal and faulty values
df.drop([1,2,3,4,5,6,13,14,41], inplace = True)

# this will replace "Boston Celtics" with "Omega Warrior"
df.replace(to_replace =40,
                 value =0)
df

# importing pandas module
import pandas as pd

# making data frame from csv file
data = pd.read_csv("dataset_power_1.csv", index_col ="marker" )
df = pd.DataFrame(data, columns = ['marker'])
df.replace('1','0')
# # dropping normal and faulty values
# data.drop([1,2,3,4,5,6,13,14,41], inplace = True)

# changing values
# for column in df.columns:
# # for col in df.columns():
#     df.loc[df[column] == 41, column] = 0
#     print(df[column])

# display
data
# data.to_csv("test.csv", index=True)

import pandas as pd

# making data frame from csv file
data = pd.read_csv("dataset_power_1.csv", index_col ="marker" )

df = pd.DataFrame(data, columns = ['marker'])

# Values to find and their replacements
findL = [41]
replaceL = [0]

# Select column (can be A,B,C,D)
col = 'marker';

# Find and replace values in the selected column
df[col] = df[col].replace(findL, replaceL)

df[col]

print(X.drop(X.marker[[41, 1, 2]]))



### Define Columns for "IEEE" resutls

# Deep Neural Network Classifier
IEEE14_DNN_acc=[]
IEEE14_DNN_pre=[]
IEEE14_DNN_rec=[]
IEEE14_DNN_fm=[]
IEEE14_DNN_jac=[]
IEEE14_DNN_gem=[]
IEEE14_DNN_mcc=[]

#Decision Tree Classifier
IEEE14_DT_acc=[]
IEEE14_DT_pre=[]
IEEE14_DT_rec=[]
IEEE14_DT_fm=[]
IEEE14_DT_jac=[]
IEEE14_DT_gem=[]
IEEE14_DT_mcc=[]

#Adaboost Classifier
IEEE14_ADA_acc=[]
IEEE14_ADA_pre=[]
IEEE14_ADA_rec=[]
IEEE14_ADA_fm=[]
IEEE14_ADA_jac=[]
IEEE14_ADA_gem=[]
IEEE14_ADA_mcc=[]

#Support Vector Machine Classifier
IEEE14_SVM_acc=[]
IEEE14_SVM_pre=[]
IEEE14_SVM_rec=[]
IEEE14_SVM_fm=[]
IEEE14_SVM_jac=[]
IEEE14_SVM_gem=[]
IEEE14_SVM_mcc=[]

#Random Forest Classifer
IEEE14_RF_acc=[]
IEEE14_RF_pre=[]
IEEE14_RF_rec=[]
IEEE14_RF_fm=[]
IEEE14_RF_jac=[]
IEEE14_RF_gem=[]
IEEE14_RF_mcc=[]

#Gradient Boosting Classifer
IEEE14_GB_acc=[]
IEEE14_GB_pre=[]
IEEE14_GB_rec=[]
IEEE14_GB_fm=[]
IEEE14_GB_jac=[]
IEEE14_GB_gem=[]
IEEE14_GB_mcc=[]

### Reading Data
X=pd.read_csv('Dataset_IEEE14.csv')
y=X['label']

### Data Pprocessing
X=X.fillna(-1)
names=X.columns
scalar=preprocessing.MinMaxScaler()
X=scalar.fit_transform(X)
X=pd.DataFrame(X,columns=names)
X=X.drop(['label'],axis=1)
X=np.array(X)


### Run forloop (10-Fold Cross Validation)
i=0
cv = KFold(10, True, 1)
input_rep=34
input_fin=4
for train, test in cv.split(X):

    X_train, X_test, y_train, y_test = X[train], X[test], y[train], y[test]
    Normal=X_train[y_train==0]
    Attack=X_train[y_train==1]
    y_train2 = to_categorical(y_train,num_classes=2)
    y_test2 = to_categorical(y_test,num_classes=2)

### Generating New Representation:Increase # of sets based on performance
    set1=dataMaker(Normal,Attack,50)
    set2=dataMaker(Normal,Attack,50)

    #    model1=Set1(X_train)

    model1=Set1(set1)
    model2=Set2(set2)

    trainSet1=getFeatures(X_train,model1)
    trainSet2=getFeatures(X_train,model2)

    testSet1=getFeatures(X_test,model1)
    testSet2=getFeatures(X_test,model2)

    ### Feed New Representation to Neural Network
    #NN for trainSet1:
#     model1=Set1_Neural_Network(X=trainSet1,Y=y_train2,XV=testSet1,YV=y_test2)
    model1=RF_Classifier(X=trainSet1,Y=y_train2)

    #NN for trainSet2:
#     model2=Set2_Neural_Network(X=trainSet2,Y=y_train2,XV=testSet2,YV=y_test2)
    model2=RF_Classifier(X=trainSet2,Y=y_train2)


    # NN Vector
    trainSet1=model1.predict(trainSet1)
    trainSet2=model2.predict(trainSet2)

    testSet1=model1.predict(testSet1)
    testSet2=model2.predict(testSet2)

###Concatenate (combine) sets from Neural Networks
    trainSets=(trainSet1,trainSet2)
    trainRep=np.concatenate(trainSets,axis=1)

    testSets=(testSet1,testSet2)
    testRep=np.concatenate(testSets,axis=1)



## Feed Results to Classifiers

    #DNN Classifier :
    SAE=Final_Neural_Network(X=trainRep,Y=y_train2,XV=testRep,YV=y_test2)

    k1=SAE.predict(testRep)
    p=np.zeros(k1.shape[0])
    for i in range(k1.shape[0]):
        tmp=max(k1[i,0],k1[i,1])
        if k1[i,0]==tmp:
            p[i]=0
        if k1[i,1]==tmp:
            p[i]=1
    #Decision Tree Classifer
    pca = PCA(n_components = 1)
    Xtr2 = pca.fit_transform(trainRep)
    Xte2= pca.transform(testRep)
    clf = DecisionTreeClassifier()
    clf = clf.fit(Xtr2,y_train)
    p1 = clf.predict(Xte2)
    #Adaboost Classifer
    Ada = AdaBoostClassifier(n_estimators=1)
    Ada = Ada.fit(trainRep, y_train)
    p2 = Ada.predict(testRep)
    #Support Vector Machine Classifer
    SVM = SVC()
    SVM = SVM.fit(trainRep, y_train)
    p3 = SVM.predict(testRep)
    ### Feed Results to Random Forest Classifer
    RF = RandomForestClassifier(n_estimators=100, max_depth=7,random_state=0)
    RF.fit(trainRep, y_train)
    p4 = RF.predict(testRep)
    #Gradient Boosting Classifer
    GB = GradientBoostingClassifier(n_estimators=1, max_features=1, max_depth=1, random_state=0)
    GB.fit(trainRep, y_train)
    p5 = GB.predict(testRep)

    ###Display results for each classifier
    #Deep Neural Network Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-DNN %f" %accuracy_score(y_test, p))
    print("Precision-DNN (macro): %f" % precision_score(y_test, p, average='macro'))
    print("Recall-DNN (macro): %f" % recall_score(y_test, p, average='macro'))
    print("F1 score-DNN (macro): %f" % f1_score(y_test, p, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p))

    #Decision Tree Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-DT %f" %accuracy_score(y_test, p1))
    print("Precision-DT (macro): %f" % precision_score(y_test, p1, average='macro'))
    print("Recall-DT (macro): %f" % recall_score(y_test, p1, average='macro'))
    print("F1 score-DT (macro): %f" % f1_score(y_test, p1, average='macro'))
    print("Jaccard Score-DT(macro):%f"%jaccard_similarity_score(y_test,p1))
    print("Geometric Mean Score-DT(macro):%f"%geometric_mean_score(y_test,p1, average='macro'))
    print("Matthews Correlation Coefficient-DT(macro):%f"%matthews_corrcoef(y_test, p1))

    #Adaboost Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-ADA: %f" %accuracy_score(y_test, p2))
    print("Precision-ADA (macro): %f" % precision_score(y_test, p2, average='macro'))
    print("Recall-ADA (macro): %f" % recall_score(y_test, p2, average='macro'))
    print("F1 score-ADA (macro): %f" % f1_score(y_test, p2, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p2))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p2, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p2))

    #Support Vector Machine Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-SVM: %f" %accuracy_score(y_test, p3))
    print("Precision-SVM (macro): %f" % precision_score(y_test, p3, average='macro'))
    print("Recall-SVM (macro): %f" % recall_score(y_test, p3, average='macro'))
    print("F1 score-SVM (macro): %f" % f1_score(y_test, p3, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p3))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p3, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p3))

    #Random Forest Classifer
    print("i:"+ str(i))
    i+=1
    print("Accuracy-RF: %f" %accuracy_score(y_test, p4))
    print("Precision-RF (macro): %f" % precision_score(y_test, p4, average='macro'))
    print("Recall-RF (macro): %f" % recall_score(y_test, p4, average='macro'))
    print("F1 score-RF (macro): %f" % f1_score(y_test, p4, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p4))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p4, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p4))

    #Gradient Boosting Classifer
    print("i:"+ str(i))
    i+=1
    print("Accuracy-GB: %f" %accuracy_score(y_test, p5))
    print("Precision-GB (macro): %f" % precision_score(y_test, p5, average='macro'))
    print("Recall-GB (macro): %f" % recall_score(y_test, p5, average='macro'))
    print("F1 score-GB (macro): %f" % f1_score(y_test, p5, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p5))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p5, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p5))

    ## Add final results to lists (using columns defined earlier)
    #Deep Neural Network Classifier
    IEEE14_DNN_acc.append(accuracy_score(y_test, p))
    IEEE14_DNN_fm.append(f1_score(y_test, p, average='macro'))
    IEEE14_DNN_rec.append(recall_score(y_test, p, average='macro'))
    IEEE14_DNN_pre.append(precision_score(y_test, p, average='macro'))
    IEEE14_DNN_jac.append(jaccard_similarity_score(y_test,p))
    IEEE14_DNN_gem.append(geometric_mean_score(y_test,p, average='macro'))
    IEEE14_DNN_mcc.append(matthews_corrcoef(y_test,p))

    #Decision Tree Classifier
    IEEE14_DT_acc.append(accuracy_score(y_test, p1))
    IEEE14_DT_fm.append(f1_score(y_test, p1, average='macro'))
    IEEE14_DT_rec.append(recall_score(y_test, p1, average='macro'))
    IEEE14_DT_pre.append(precision_score(y_test, p1, average='macro'))
    IEEE14_DT_jac.append(jaccard_similarity_score(y_test,p1))
    IEEE14_DT_gem.append(geometric_mean_score(y_test,p1, average='macro'))
    IEEE14_DT_mcc.append(matthews_corrcoef(y_test,p1))

    #Adaboost Classifier
    IEEE14_ADA_acc.append(accuracy_score(y_test, p2))
    IEEE14_ADA_fm.append(f1_score(y_test, p2, average='macro'))
    IEEE14_ADA_rec.append(recall_score(y_test, p2, average='macro'))
    IEEE14_ADA_pre.append(precision_score(y_test, p2, average='macro'))
    IEEE14_ADA_jac.append(jaccard_similarity_score(y_test,p2))
    IEEE14_ADA_gem.append(geometric_mean_score(y_test,p2, average='macro'))
    IEEE14_ADA_mcc.append(matthews_corrcoef(y_test,p2))

    #Support Vector Machine Classifier
    IEEE14_SVM_acc.append(accuracy_score(y_test, p3))
    IEEE14_SVM_fm.append(f1_score(y_test, p3, average='macro'))
    IEEE14_SVM_rec.append(recall_score(y_test, p3, average='macro'))
    IEEE14_SVM_pre.append(precision_score(y_test, p3, average='macro'))
    IEEE14_SVM_jac.append(jaccard_similarity_score(y_test,p3))
    IEEE14_SVM_gem.append(geometric_mean_score(y_test,p3, average='macro'))
    IEEE14_SVM_mcc.append(matthews_corrcoef(y_test,p3))

    #Random Forest Classifer
    IEEE14_RF_acc.append(accuracy_score(y_test, p4))
    IEEE14_RF_fm.append(f1_score(y_test, p4, average='macro'))
    IEEE14_RF_rec.append(recall_score(y_test, p4, average='macro'))
    IEEE14_RF_pre.append(precision_score(y_test, p4, average='macro'))
    IEEE14_RF_jac.append(jaccard_similarity_score(y_test,p4))
    IEEE14_RF_gem.append(geometric_mean_score(y_test,p4, average='macro'))
    IEEE14_RF_mcc.append(matthews_corrcoef(y_test,p4))

    #Gradient Boosting Classifer
    IEEE14_GB_acc.append(accuracy_score(y_test, p5))
    IEEE14_GB_fm.append(f1_score(y_test, p5, average='macro'))
    IEEE14_GB_rec.append(recall_score(y_test, p5, average='macro'))
    IEEE14_GB_pre.append(precision_score(y_test, p5, average='macro'))
    IEEE14_GB_jac.append(jaccard_similarity_score(y_test,p5))
    IEEE14_GB_gem.append(geometric_mean_score(y_test,p5, average='macro'))
    IEEE14_GB_mcc.append(matthews_corrcoef(y_test,p5))

### Saving Final Results to a CSV file
df = pd.DataFrame({
    #DNN
    'Accuracy-DNN': IEEE14_DNN_acc,
    'F1 Measure-DNN': IEEE14_DNN_fm,
    'Recall-DNN': IEEE14_DNN_rec,
    'Precision-DNN': IEEE14_DNN_pre,
    'Jaccard Score-DNN': IEEE14_DNN_jac,
    'Geometric Mean Score-DNN': IEEE14_DNN_gem,
    'Matthews Correlation Coefficient-DNN': IEEE14_DNN_mcc,
    #SVM
    'Accuracy-SVM': IEEE14_SVM_acc,
    'F1 Measure-SVM': IEEE14_SVM_fm,
    'Recall-SVM': IEEE14_SVM_rec,
    'Precision-SVM': IEEE14_SVM_pre,
    'Jaccard Score-SVM': IEEE14_SVM_jac,
    'Geometric Mean Score-SVM': IEEE14_SVM_gem,
    'Matthews Correlation Coefficient-SVM': IEEE14_SVM_mcc,
    #DT
    'Accuracy-DT': IEEE14_DT_acc,
    'F1 Measure-DT': IEEE14_DT_fm,
    'Recall-DT': IEEE14_DT_rec,
    'Precision-DT': IEEE14_DT_pre,
    'Jaccard Score-DT': IEEE14_DT_jac,
    'Geometric Mean Score-DT': IEEE14_DT_gem,
    'Matthews Correlation Coefficient-DT': IEEE14_DT_mcc,
    #ADA
    'Accuracy-ADA': IEEE14_ADA_acc,
    'F1 Measure-ADA': IEEE14_ADA_fm,
    'Recall-ADA': IEEE14_ADA_rec,
    'Precision-ADA': IEEE14_ADA_pre,
    'Jaccard Score-ADA': IEEE14_ADA_jac,
    'Geometric Mean Score-ADA': IEEE14_ADA_gem,
    'Matthews Correlation Coefficient-ADA': IEEE14_ADA_mcc,
    #GB
    'Accuracy-GB': IEEE14_GB_acc,
    'F1 Measure-GB': IEEE14_GB_fm,
    'Recall-GB': IEEE14_GB_rec,
    'Precision-GB': IEEE14_GB_pre,
    'Jaccard Score-GB': IEEE14_GB_jac,
    'Geometric Mean Score-GB': IEEE14_GB_gem,
    'Matthews Correlation Coefficient-GB': IEEE14_GB_mcc,
    #RF
    'Accuracy-RF': IEEE14_RF_acc,
    'F1 Measure-RF': IEEE14_RF_fm,
    'Recall-RF': IEEE14_RF_rec,
    'Precision-RF': IEEE14_RF_pre,
    'Jaccard Score-RF': IEEE14_RF_jac,
    'Geometric Mean Score-RF': IEEE14_RF_gem,
    'Matthews Correlation Coefficient-RF': IEEE14_RF_mcc,
})
export_csv = df.to_csv('Results_IEEE14.csv', index = None, header=True)

### Define Columns for "IEEE" resutls

# # Deep Neural Network Classifier
# IEEE57_DNN_acc=[]
# IEEE57_DNN_pre=[]
# IEEE57_DNN_rec=[]
# IEEE57_DNN_fm=[]
# IEEE57_DNN_jac=[]
# IEEE57_DNN_gem=[]
# IEEE57_DNN_mcc=[]

# #Decision Tree Classifier
# IEEE57_DT_acc=[]
# IEEE57_DT_pre=[]
# IEEE57_DT_rec=[]
# IEEE57_DT_fm=[]
# IEEE57_DT_jac=[]
# IEEE57_DT_gem=[]
# IEEE57_DT_mcc=[]

# #Adaboost Classifier
# IEEE57_ADA_acc=[]
# IEEE57_ADA_pre=[]
# IEEE57_ADA_rec=[]
# IEEE57_ADA_fm=[]
# IEEE57_ADA_jac=[]
# IEEE57_ADA_gem=[]
# IEEE57_ADA_mcc=[]

# #Support Vector Machine Classifier
# IEEE57_SVM_acc=[]
# IEEE57_SVM_pre=[]
# IEEE57_SVM_rec=[]
# IEEE57_SVM_fm=[]
# IEEE57_SVM_jac=[]
# IEEE57_SVM_gem=[]
# IEEE57_SVM_mcc=[]

#Random Forest Classifer
IEEE57_RF_acc=[]
IEEE57_RF_pre=[]
IEEE57_RF_rec=[]
IEEE57_RF_fm=[]
IEEE57_RF_jac=[]
IEEE57_RF_gem=[]
IEEE57_RF_mcc=[]

# #Gradient Boosting Classifer
# IEEE57_GB_acc=[]
# IEEE57_GB_pre=[]
# IEEE57_GB_rec=[]
# IEEE57_GB_fm=[]
# IEEE57_GB_jac=[]
# IEEE57_GB_gem=[]
# IEEE57_GB_mcc=[]

### Reading Data
X=pd.read_csv('Dataset_IEEE57.csv')
y=X['label']

### Data Pprocessing
X=X.fillna(-1)
names=X.columns
scalar=preprocessing.MinMaxScaler()
X=scalar.fit_transform(X)
X=pd.DataFrame(X,columns=names)
X=X.drop(['label'],axis=1)
X=np.array(X)


### Run forloop (10-Fold Cross Validation)
i=0
cv = KFold(10, True, 1)
input_rep=34
input_fin=4
for train, test in cv.split(X):

    X_train, X_test, y_train, y_test = X[train], X[test], y[train], y[test]
    Normal=X_train[y_train==0]
    Attack=X_train[y_train==1]
    y_train2 = to_categorical(y_train,num_classes=2)
    y_test2 = to_categorical(y_test,num_classes=2)

### Generating New Representation:Increase # of sets based on performance
    set1=dataMaker(Normal,Attack,50)
    set2=dataMaker(Normal,Attack,50)

    model1=Set1(set1)
    model2=Set2(set2)

    trainSet1=getFeatures(X_train,model1)
    trainSet2=getFeatures(X_train,model2)

    testSet1=getFeatures(X_test,model1)
    testSet2=getFeatures(X_test,model2)

    ### Feed New Representation to Neural Network
    #NN for trainSet1:
#     model1=Set1_Neural_Network(X=trainSet1,Y=y_train2,XV=testSet1,YV=y_test2)
    model1=RF_Classifier(X=trainSet1,Y=y_train2)

    #NN for trainSet2:
#     model2=Set2_Neural_Network(X=trainSet2,Y=y_train2,XV=testSet2,YV=y_test2)
    model2=RF_Classifier(X=trainSet2,Y=y_train2)


    # NN Vector
    trainSet1=model1.predict(trainSet1)
    trainSet2=model2.predict(trainSet2)

    testSet1=model1.predict(testSet1)
    testSet2=model2.predict(testSet2)

###Concatenate (combine) sets from Neural Networks
    trainSets=(trainSet1,trainSet2)
    trainRep=np.concatenate(trainSets,axis=1)

    testSets=(testSet1,testSet2)
    testRep=np.concatenate(testSets,axis=1)



# ## Feed Results to Classifiers

#     #DNN Classifier :
#     SAE=Final_Neural_Network(X=trainRep,Y=y_train2,XV=testRep,YV=y_test2)

#     k1=SAE.predict(testRep)
#     p=np.zeros(k1.shape[0])
#     for i in range(k1.shape[0]):
#         tmp=max(k1[i,0],k1[i,1])
#         if k1[i,0]==tmp:
#             p[i]=0
#         if k1[i,1]==tmp:
#             p[i]=1
#     #Decision Tree Classifer
#     pca = PCA(n_components = 1)
#     Xtr2 = pca.fit_transform(trainRep)
#     Xte2= pca.transform(testRep)
#     clf = DecisionTreeClassifier()
#     clf = clf.fit(Xtr2,y_train)
#     p1 = clf.predict(Xte2)
#     #Adaboost Classifer
#     Ada = AdaBoostClassifier(n_estimators=1)
#     Ada = Ada.fit(trainRep, y_train)
#     p2 = Ada.predict(testRep)
#     #Support Vector Machine Classifer
#     SVM = SVC()
#     SVM = SVM.fit(trainRep, y_train)
#     p3 = SVM.predict(testRep)
    ### Feed Results to Random Forest Classifer
    RF = RandomForestClassifier(n_estimators=30, max_depth=6,random_state=0)
    RF.fit(trainRep, y_train)
    p4 = RF.predict(testRep)
#     #Gradient Boosting Classifer
#     GB = GradientBoostingClassifier(n_estimators=1, max_features=1, max_depth=1, random_state=0)
#     GB.fit(trainRep, y_train)
#     p5 = GB.predict(testRep)

#     ###Display results for each classifier
#     #Deep Neural Network Classifier
#     print("i:"+ str(i))
#     i+=1
#     print("Accuracy-DNN %f" %accuracy_score(y_test, p))
#     print("Precision-DNN (macro): %f" % precision_score(y_test, p, average='macro'))
#     print("Recall-DNN (macro): %f" % recall_score(y_test, p, average='macro'))
#     print("F1 score-DNN (macro): %f" % f1_score(y_test, p, average='macro'))
#     print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p))
#     print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p, average='macro'))
#     print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p))

#     #Decision Tree Classifier
#     print("i:"+ str(i))
#     i+=1
#     print("Accuracy-DT %f" %accuracy_score(y_test, p1))
#     print("Precision-DT (macro): %f" % precision_score(y_test, p1, average='macro'))
#     print("Recall-DT (macro): %f" % recall_score(y_test, p1, average='macro'))
#     print("F1 score-DT (macro): %f" % f1_score(y_test, p1, average='macro'))
#     print("Jaccard Score-DT(macro):%f"%jaccard_similarity_score(y_test,p1))
#     print("Geometric Mean Score-DT(macro):%f"%geometric_mean_score(y_test,p1, average='macro'))
#     print("Matthews Correlation Coefficient-DT(macro):%f"%matthews_corrcoef(y_test, p1))

#     #Adaboost Classifier
#     print("i:"+ str(i))
#     i+=1
#     print("Accuracy-ADA: %f" %accuracy_score(y_test, p2))
#     print("Precision-ADA (macro): %f" % precision_score(y_test, p2, average='macro'))
#     print("Recall-ADA (macro): %f" % recall_score(y_test, p2, average='macro'))
#     print("F1 score-ADA (macro): %f" % f1_score(y_test, p2, average='macro'))
#     print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p2))
#     print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p2, average='macro'))
#     print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p2))

#     #Support Vector Machine Classifier
#     print("i:"+ str(i))
#     i+=1
#     print("Accuracy-SVM: %f" %accuracy_score(y_test, p3))
#     print("Precision-SVM (macro): %f" % precision_score(y_test, p3, average='macro'))
#     print("Recall-SVM (macro): %f" % recall_score(y_test, p3, average='macro'))
#     print("F1 score-SVM (macro): %f" % f1_score(y_test, p3, average='macro'))
#     print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p3))
#     print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p3, average='macro'))
#     print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p3))

    #Random Forest Classifer
    print("i:"+ str(i))
    i+=1
    print("Accuracy-RF: %f" %accuracy_score(y_test, p4))
    print("Precision-RF (macro): %f" % precision_score(y_test, p4, average='macro'))
    print("Recall-RF (macro): %f" % recall_score(y_test, p4, average='macro'))
    print("F1 score-RF (macro): %f" % f1_score(y_test, p4, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p4))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p4, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p4))

#     #Gradient Boosting Classifer
#     print("i:"+ str(i))
#     i+=1
#     print("Accuracy-GB: %f" %accuracy_score(y_test, p5))
#     print("Precision-GB (macro): %f" % precision_score(y_test, p5, average='macro'))
#     print("Recall-GB (macro): %f" % recall_score(y_test, p5, average='macro'))
#     print("F1 score-GB (macro): %f" % f1_score(y_test, p5, average='macro'))
#     print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p5))
#     print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p5, average='macro'))
#     print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p5))

#     ## Add final results to lists (using columns defined earlier)
#     #Deep Neural Network Classifier
#     IEEE57_DNN_acc.append(accuracy_score(y_test, p))
#     IEEE57_DNN_fm.append(f1_score(y_test, p, average='macro'))
#     IEEE57_DNN_rec.append(recall_score(y_test, p, average='macro'))
#     IEEE57_DNN_pre.append(precision_score(y_test, p, average='macro'))
#     IEEE57_DNN_jac.append(jaccard_similarity_score(y_test,p))
#     IEEE57_DNN_gem.append(geometric_mean_score(y_test,p, average='macro'))
#     IEEE57_DNN_mcc.append(matthews_corrcoef(y_test,p))

#     #Decision Tree Classifier
#     IEEE57_DT_acc.append(accuracy_score(y_test, p1))
#     IEEE57_DT_fm.append(f1_score(y_test, p1, average='macro'))
#     IEEE57_DT_rec.append(recall_score(y_test, p1, average='macro'))
#     IEEE57_DT_pre.append(precision_score(y_test, p1, average='macro'))
#     IEEE57_DT_jac.append(jaccard_similarity_score(y_test,p1))
#     IEEE57_DT_gem.append(geometric_mean_score(y_test,p1, average='macro'))
#     IEEE57_DT_mcc.append(matthews_corrcoef(y_test,p1))

#     #Adaboost Classifier
#     IEEE57_ADA_acc.append(accuracy_score(y_test, p2))
#     IEEE57_ADA_fm.append(f1_score(y_test, p2, average='macro'))
#     IEEE57_ADA_rec.append(recall_score(y_test, p2, average='macro'))
#     IEEE57_ADA_pre.append(precision_score(y_test, p2, average='macro'))
#     IEEE57_ADA_jac.append(jaccard_similarity_score(y_test,p2))
#     IEEE57_ADA_gem.append(geometric_mean_score(y_test,p2, average='macro'))
#     IEEE57_ADA_mcc.append(matthews_corrcoef(y_test,p2))

#     #Support Vector Machine Classifier
#     IEEE57_SVM_acc.append(accuracy_score(y_test, p3))
#     IEEE57_SVM_fm.append(f1_score(y_test, p3, average='macro'))
#     IEEE57_SVM_rec.append(recall_score(y_test, p3, average='macro'))
#     IEEE57_SVM_pre.append(precision_score(y_test, p3, average='macro'))
#     IEEE57_SVM_jac.append(jaccard_similarity_score(y_test,p3))
#     IEEE57_SVM_gem.append(geometric_mean_score(y_test,p3, average='macro'))
#     IEEE57_SVM_mcc.append(matthews_corrcoef(y_test,p3))

    #Random Forest Classifer
    IEEE57_RF_acc.append(accuracy_score(y_test, p4))
    IEEE57_RF_fm.append(f1_score(y_test, p4, average='macro'))
    IEEE57_RF_rec.append(recall_score(y_test, p4, average='macro'))
    IEEE57_RF_pre.append(precision_score(y_test, p4, average='macro'))
    IEEE57_RF_jac.append(jaccard_similarity_score(y_test,p4))
    IEEE57_RF_gem.append(geometric_mean_score(y_test,p4, average='macro'))
    IEEE57_RF_mcc.append(matthews_corrcoef(y_test,p4))

#     #Gradient Boosting Classifer
#     IEEE57_GB_acc.append(accuracy_score(y_test, p5))
#     IEEE57_GB_fm.append(f1_score(y_test, p5, average='macro'))
#     IEEE57_GB_rec.append(recall_score(y_test, p5, average='macro'))
#     IEEE57_GB_pre.append(precision_score(y_test, p5, average='macro'))
#     IEEE57_GB_jac.append(jaccard_similarity_score(y_test,p5))
#     IEEE57_GB_gem.append(geometric_mean_score(y_test,p5, average='macro'))
#     IEEE57_GB_mcc.append(matthews_corrcoef(y_test,p5))

### Saving Final Results to a CSV file
df = pd.DataFrame({
#     #DNN
#     'Accuracy-DNN': IEEE57_DNN_acc,
#     'F1 Measure-DNN': IEEE57_DNN_fm,
#     'Recall-DNN': IEEE57_DNN_rec,
#     'Precision-DNN': IEEE57_DNN_pre,
#     'Jaccard Score-DNN': IEEE57_DNN_jac,
#     'Geometric Mean Score-DNN': IEEE57_DNN_gem,
#     'Matthews Correlation Coefficient-DNN': IEEE57_DNN_mcc,
#     #SVM
#     'Accuracy-SVM': IEEE57_SVM_acc,
#     'F1 Measure-SVM': IEEE57_SVM_fm,
#     'Recall-SVM': IEEE57_SVM_rec,
#     'Precision-SVM': IEEE57_SVM_pre,
#     'Jaccard Score-SVM': IEEE57_SVM_jac,
#     'Geometric Mean Score-SVM': IEEE57_SVM_gem,
#     'Matthews Correlation Coefficient-SVM': IEEE57_SVM_mcc,
#     #DT
#     'Accuracy-DT': IEEE57_DT_acc,
#     'F1 Measure-DT': IEEE57_DT_fm,
#     'Recall-DT': IEEE57_DT_rec,
#     'Precision-DT': IEEE57_DT_pre,
#     'Jaccard Score-DT': IEEE57_DT_jac,
#     'Geometric Mean Score-DT': IEEE57_DT_gem,
#     'Matthews Correlation Coefficient-DT': IEEE57_DT_mcc,
#     #ADA
#     'Accuracy-ADA': IEEE57_ADA_acc,
#     'F1 Measure-ADA': IEEE57_ADA_fm,
#     'Recall-ADA': IEEE57_ADA_rec,
#     'Precision-ADA': IEEE57_ADA_pre,
#     'Jaccard Score-ADA': IEEE57_ADA_jac,
#     'Geometric Mean Score-ADA': IEEE57_ADA_gem,
#     'Matthews Correlation Coefficient-ADA': IEEE57_ADA_mcc,
#     #GB
#     'Accuracy-GB': IEEE57_GB_acc,
#     'F1 Measure-GB': IEEE57_GB_fm,
#     'Recall-GB': IEEE57_GB_rec,
#     'Precision-GB': IEEE57_GB_pre,
#     'Jaccard Score-GB': IEEE57_GB_jac,
#     'Geometric Mean Score-GB': IEEE57_GB_gem,
#     'Matthews Correlation Coefficient-GB': IEEE57_GB_mcc,
    #RF
    'Accuracy-RF': IEEE57_RF_acc,
    'F1 Measure-RF': IEEE57_RF_fm,
    'Recall-RF': IEEE57_RF_rec,
    'Precision-RF': IEEE57_RF_pre,
    'Jaccard Score-RF': IEEE57_RF_jac,
    'Geometric Mean Score-RF': IEEE57_RF_gem,
    'Matthews Correlation Coefficient-RF': IEEE57_RF_mcc,
})
export_csv = df.to_csv('Results_IEEE57_RF.csv', index = None, header=True)

### Define Columns for "IEEE" resutls

# # Deep Neural Network Classifier
# IEEE30_DNN_acc=[]
# IEEE30_DNN_pre=[]
# IEEE30_DNN_rec=[]
# IEEE30_DNN_fm=[]
# IEEE30_DNN_jac=[]
# IEEE30_DNN_gem=[]
# IEEE30_DNN_mcc=[]

# #Decision Tree Classifier
# IEEE30_DT_acc=[]
# IEEE30_DT_pre=[]
# IEEE30_DT_rec=[]
# IEEE30_DT_fm=[]
# IEEE30_DT_jac=[]
# IEEE30_DT_gem=[]
# IEEE30_DT_mcc=[]

# #Adaboost Classifier
# IEEE30_ADA_acc=[]
# IEEE30_ADA_pre=[]
# IEEE30_ADA_rec=[]
# IEEE30_ADA_fm=[]
# IEEE30_ADA_jac=[]
# IEEE30_ADA_gem=[]
# IEEE30_ADA_mcc=[]

# #Support Vector Machine Classifier
# IEEE30_SVM_acc=[]
# IEEE30_SVM_pre=[]
# IEEE30_SVM_rec=[]
# IEEE30_SVM_fm=[]
# IEEE30_SVM_jac=[]
# IEEE30_SVM_gem=[]
# IEEE30_SVM_mcc=[]

#Random Forest Classifer
IEEE30_RF_acc=[]
IEEE30_RF_pre=[]
IEEE30_RF_rec=[]
IEEE30_RF_fm=[]
IEEE30_RF_jac=[]
IEEE30_RF_gem=[]
IEEE30_RF_mcc=[]

# #Gradient Boosting Classifer
# IEEE30_GB_acc=[]
# IEEE30_GB_pre=[]
# IEEE30_GB_rec=[]
# IEEE30_GB_fm=[]
# IEEE30_GB_jac=[]
# IEEE30_GB_gem=[]
# IEEE30_GB_mcc=[]

### Reading Data
X=pd.read_csv('Dataset_IEEE30.csv')
y=X['label']

### Data Pprocessing
X=X.fillna(-1)
names=X.columns
scalar=preprocessing.MinMaxScaler()
X=scalar.fit_transform(X)
X=pd.DataFrame(X,columns=names)
X=X.drop(['label'],axis=1)
X=np.array(X)


### Run forloop (10-Fold Cross Validation)
i=0
cv = KFold(10, True, 1)
input_rep=34
input_fin=4
for train, test in cv.split(X):

    X_train, X_test, y_train, y_test = X[train], X[test], y[train], y[test]
    Normal=X_train[y_train==0]
    Attack=X_train[y_train==1]
    y_train2 = to_categorical(y_train,num_classes=2)
    y_test2 = to_categorical(y_test,num_classes=2)

### Generating New Representation:Increase # of sets based on performance
    set1=dataMaker(Normal,Attack,50)
    set2=dataMaker(Normal,Attack,50)

    model1=Set1(set1)
    model2=Set2(set2)

    trainSet1=getFeatures(X_train,model1)
    trainSet2=getFeatures(X_train,model2)

    testSet1=getFeatures(X_test,model1)
    testSet2=getFeatures(X_test,model2)

    ### Feed New Representation to Neural Network
    #NN for trainSet1:
#     model1=Set1_Neural_Network(X=trainSet1,Y=y_train2,XV=testSet1,YV=y_test2)
    model1=RF_Classifier(X=trainSet1,Y=y_train2)

    #NN for trainSet2:
#     model2=Set2_Neural_Network(X=trainSet2,Y=y_train2,XV=testSet2,YV=y_test2)
    model2=RF_Classifier(X=trainSet2,Y=y_train2)


    # NN Vector
    trainSet1=model1.predict(trainSet1)
    trainSet2=model2.predict(trainSet2)

    testSet1=model1.predict(testSet1)
    testSet2=model2.predict(testSet2)

###Concatenate (combine) sets from Neural Networks
    trainSets=(trainSet1,trainSet2)
    trainRep=np.concatenate(trainSets,axis=1)

    testSets=(testSet1,testSet2)
    testRep=np.concatenate(testSets,axis=1)



# ## Feed Results to Classifiers

#     #DNN Classifier :
#     SAE=Final_Neural_Network(X=trainRep,Y=y_train2,XV=testRep,YV=y_test2)

#     k1=SAE.predict(testRep)
#     p=np.zeros(k1.shape[0])
#     for i in range(k1.shape[0]):
#         tmp=max(k1[i,0],k1[i,1])
#         if k1[i,0]==tmp:
#             p[i]=0
#         if k1[i,1]==tmp:
#             p[i]=1
#     #Decision Tree Classifer
#     pca = PCA(n_components = 1)
#     Xtr2 = pca.fit_transform(trainRep)
#     Xte2= pca.transform(testRep)
#     clf = DecisionTreeClassifier()
#     clf = clf.fit(Xtr2,y_train)
#     p1 = clf.predict(Xte2)
#     #Adaboost Classifer
#     Ada = AdaBoostClassifier(n_estimators=1)
#     Ada = Ada.fit(trainRep, y_train)
#     p2 = Ada.predict(testRep)
#     #Support Vector Machine Classifer
#     SVM = SVC()
#     SVM = SVM.fit(trainRep, y_train)
#     p3 = SVM.predict(testRep)
    ### Feed Results to Random Forest Classifer
    RF = RandomForestClassifier(n_estimators=100, max_depth=7,random_state=0)
    RF.fit(trainRep, y_train)
    p4 = RF.predict(testRep)
#     #Gradient Boosting Classifer
#     GB = GradientBoostingClassifier(n_estimators=1, max_features=1, max_depth=1, random_state=0)
#     GB.fit(trainRep, y_train)
#     p5 = GB.predict(testRep)

#     ###Display results for each classifier
#     #Deep Neural Network Classifier
#     print("i:"+ str(i))
#     i+=1
#     print("Accuracy-DNN %f" %accuracy_score(y_test, p))
#     print("Precision-DNN (macro): %f" % precision_score(y_test, p, average='macro'))
#     print("Recall-DNN (macro): %f" % recall_score(y_test, p, average='macro'))
#     print("F1 score-DNN (macro): %f" % f1_score(y_test, p, average='macro'))
#     print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p))
#     print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p, average='macro'))
#     print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p))

#     #Decision Tree Classifier
#     print("i:"+ str(i))
#     i+=1
#     print("Accuracy-DT %f" %accuracy_score(y_test, p1))
#     print("Precision-DT (macro): %f" % precision_score(y_test, p1, average='macro'))
#     print("Recall-DT (macro): %f" % recall_score(y_test, p1, average='macro'))
#     print("F1 score-DT (macro): %f" % f1_score(y_test, p1, average='macro'))
#     print("Jaccard Score-DT(macro):%f"%jaccard_similarity_score(y_test,p1))
#     print("Geometric Mean Score-DT(macro):%f"%geometric_mean_score(y_test,p1, average='macro'))
#     print("Matthews Correlation Coefficient-DT(macro):%f"%matthews_corrcoef(y_test, p1))

#     #Adaboost Classifier
#     print("i:"+ str(i))
#     i+=1
#     print("Accuracy-ADA: %f" %accuracy_score(y_test, p2))
#     print("Precision-ADA (macro): %f" % precision_score(y_test, p2, average='macro'))
#     print("Recall-ADA (macro): %f" % recall_score(y_test, p2, average='macro'))
#     print("F1 score-ADA (macro): %f" % f1_score(y_test, p2, average='macro'))
#     print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p2))
#     print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p2, average='macro'))
#     print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p2))

#     #Support Vector Machine Classifier
#     print("i:"+ str(i))
#     i+=1
#     print("Accuracy-SVM: %f" %accuracy_score(y_test, p3))
#     print("Precision-SVM (macro): %f" % precision_score(y_test, p3, average='macro'))
#     print("Recall-SVM (macro): %f" % recall_score(y_test, p3, average='macro'))
#     print("F1 score-SVM (macro): %f" % f1_score(y_test, p3, average='macro'))
#     print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p3))
#     print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p3, average='macro'))
#     print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p3))

    #Random Forest Classifer
    print("i:"+ str(i))
    i+=1
    print("Accuracy-RF: %f" %accuracy_score(y_test, p4))
    print("Precision-RF (macro): %f" % precision_score(y_test, p4, average='macro'))
    print("Recall-RF (macro): %f" % recall_score(y_test, p4, average='macro'))
    print("F1 score-RF (macro): %f" % f1_score(y_test, p4, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p4))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p4, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p4))

#     #Gradient Boosting Classifer
#     print("i:"+ str(i))
#     i+=1
#     print("Accuracy-GB: %f" %accuracy_score(y_test, p5))
#     print("Precision-GB (macro): %f" % precision_score(y_test, p5, average='macro'))
#     print("Recall-GB (macro): %f" % recall_score(y_test, p5, average='macro'))
#     print("F1 score-GB (macro): %f" % f1_score(y_test, p5, average='macro'))
#     print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p5))
#     print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p5, average='macro'))
#     print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p5))

#     ## Add final results to lists (using columns defined earlier)
#     #Deep Neural Network Classifier
#     IEEE30_DNN_acc.append(accuracy_score(y_test, p))
#     IEEE30_DNN_fm.append(f1_score(y_test, p, average='macro'))
#     IEEE30_DNN_rec.append(recall_score(y_test, p, average='macro'))
#     IEEE30_DNN_pre.append(precision_score(y_test, p, average='macro'))
#     IEEE30_DNN_jac.append(jaccard_similarity_score(y_test,p))
#     IEEE30_DNN_gem.append(geometric_mean_score(y_test,p, average='macro'))
#     IEEE30_DNN_mcc.append(matthews_corrcoef(y_test,p))

#     #Decision Tree Classifier
#     IEEE30_DT_acc.append(accuracy_score(y_test, p1))
#     IEEE30_DT_fm.append(f1_score(y_test, p1, average='macro'))
#     IEEE30_DT_rec.append(recall_score(y_test, p1, average='macro'))
#     IEEE30_DT_pre.append(precision_score(y_test, p1, average='macro'))
#     IEEE30_DT_jac.append(jaccard_similarity_score(y_test,p1))
#     IEEE30_DT_gem.append(geometric_mean_score(y_test,p1, average='macro'))
#     IEEE30_DT_mcc.append(matthews_corrcoef(y_test,p1))

#     #Adaboost Classifier
#     IEEE30_ADA_acc.append(accuracy_score(y_test, p2))
#     IEEE30_ADA_fm.append(f1_score(y_test, p2, average='macro'))
#     IEEE30_ADA_rec.append(recall_score(y_test, p2, average='macro'))
#     IEEE30_ADA_pre.append(precision_score(y_test, p2, average='macro'))
#     IEEE30_ADA_jac.append(jaccard_similarity_score(y_test,p2))
#     IEEE30_ADA_gem.append(geometric_mean_score(y_test,p2, average='macro'))
#     IEEE30_ADA_mcc.append(matthews_corrcoef(y_test,p2))

#     #Support Vector Machine Classifier
#     IEEE30_SVM_acc.append(accuracy_score(y_test, p3))
#     IEEE30_SVM_fm.append(f1_score(y_test, p3, average='macro'))
#     IEEE30_SVM_rec.append(recall_score(y_test, p3, average='macro'))
#     IEEE30_SVM_pre.append(precision_score(y_test, p3, average='macro'))
#     IEEE30_SVM_jac.append(jaccard_similarity_score(y_test,p3))
#     IEEE30_SVM_gem.append(geometric_mean_score(y_test,p3, average='macro'))
#     IEEE30_SVM_mcc.append(matthews_corrcoef(y_test,p3))

    #Random Forest Classifer
    IEEE30_RF_acc.append(accuracy_score(y_test, p4))
    IEEE30_RF_fm.append(f1_score(y_test, p4, average='macro'))
    IEEE30_RF_rec.append(recall_score(y_test, p4, average='macro'))
    IEEE30_RF_pre.append(precision_score(y_test, p4, average='macro'))
    IEEE30_RF_jac.append(jaccard_similarity_score(y_test,p4))
    IEEE30_RF_gem.append(geometric_mean_score(y_test,p4, average='macro'))
    IEEE30_RF_mcc.append(matthews_corrcoef(y_test,p4))

#     #Gradient Boosting Classifer
#     IEEE30_GB_acc.append(accuracy_score(y_test, p5))
#     IEEE30_GB_fm.append(f1_score(y_test, p5, average='macro'))
#     IEEE30_GB_rec.append(recall_score(y_test, p5, average='macro'))
#     IEEE30_GB_pre.append(precision_score(y_test, p5, average='macro'))
#     IEEE30_GB_jac.append(jaccard_similarity_score(y_test,p5))
#     IEEE30_GB_gem.append(geometric_mean_score(y_test,p5, average='macro'))
#     IEEE30_GB_mcc.append(matthews_corrcoef(y_test,p5))

### Saving Final Results to a CSV file
df = pd.DataFrame({
#     #DNN
#     'Accuracy-DNN': IEEE30_DNN_acc,
#     'F1 Measure-DNN': IEEE30_DNN_fm,
#     'Recall-DNN': IEEE30_DNN_rec,
#     'Precision-DNN': IEEE30_DNN_pre,
#     'Jaccard Score-DNN': IEEE30_DNN_jac,
#     'Geometric Mean Score-DNN': IEEE30_DNN_gem,
#     'Matthews Correlation Coefficient-DNN': IEEE30_DNN_mcc,
#     #SVM
#     'Accuracy-SVM': IEEE30_SVM_acc,
#     'F1 Measure-SVM': IEEE30_SVM_fm,
#     'Recall-SVM': IEEE30_SVM_rec,
#     'Precision-SVM': IEEE30_SVM_pre,
#     'Jaccard Score-SVM': IEEE30_SVM_jac,
#     'Geometric Mean Score-SVM': IEEE30_SVM_gem,
#     'Matthews Correlation Coefficient-SVM': IEEE30_SVM_mcc,
#     #DT
#     'Accuracy-DT': IEEE30_DT_acc,
#     'F1 Measure-DT': IEEE30_DT_fm,
#     'Recall-DT': IEEE30_DT_rec,
#     'Precision-DT': IEEE30_DT_pre,
#     'Jaccard Score-DT': IEEE30_DT_jac,
#     'Geometric Mean Score-DT': IEEE30_DT_gem,
#     'Matthews Correlation Coefficient-DT': IEEE30_DT_mcc,
#     #ADA
#     'Accuracy-ADA': IEEE30_ADA_acc,
#     'F1 Measure-ADA': IEEE30_ADA_fm,
#     'Recall-ADA': IEEE30_ADA_rec,
#     'Precision-ADA': IEEE30_ADA_pre,
#     'Jaccard Score-ADA': IEEE30_ADA_jac,
#     'Geometric Mean Score-ADA': IEEE30_ADA_gem,
#     'Matthews Correlation Coefficient-ADA': IEEE30_ADA_mcc,
#     #GB
#     'Accuracy-GB': IEEE30_GB_acc,
#     'F1 Measure-GB': IEEE30_GB_fm,
#     'Recall-GB': IEEE30_GB_rec,
#     'Precision-GB': IEEE30_GB_pre,
#     'Jaccard Score-GB': IEEE30_GB_jac,
#     'Geometric Mean Score-GB': IEEE30_GB_gem,
#     'Matthews Correlation Coefficient-GB': IEEE30_GB_mcc,
    #RF
    'Accuracy-RF': IEEE30_RF_acc,
    'F1 Measure-RF': IEEE30_RF_fm,
    'Recall-RF': IEEE30_RF_rec,
    'Precision-RF': IEEE30_RF_pre,
    'Jaccard Score-RF': IEEE30_RF_jac,
    'Geometric Mean Score-RF': IEEE30_RF_gem,
    'Matthews Correlation Coefficient-RF': IEEE30_RF_mcc,
})
export_csv = df.to_csv('Results_IEEE30_RF.csv', index = None, header=True)

## Define Columns for " Basic Classifiers for IEEE14" resutls

#Deep Neural Network Classifier
O_IEEE14_DNN_acc=[]
O_IEEE14_DNN_pre=[]
O_IEEE14_DNN_rec=[]
O_IEEE14_DNN_fm=[]
O_IEEE14_DNN_jac=[]
O_IEEE14_DNN_gem=[]
O_IEEE14_DNN_mcc=[]

#Decision Tree Classifier
O_IEEE14_DT_acc=[]
O_IEEE14_DT_pre=[]
O_IEEE14_DT_rec=[]
O_IEEE14_DT_fm=[]
O_IEEE14_DT_jac=[]
O_IEEE14_DT_gem=[]
O_IEEE14_DT_mcc=[]

#Adaboost Classifier
O_IEEE14_ADA_acc=[]
O_IEEE14_ADA_pre=[]
O_IEEE14_ADA_rec=[]
O_IEEE14_ADA_fm=[]
O_IEEE14_ADA_jac=[]
O_IEEE14_ADA_gem=[]
O_IEEE14_ADA_mcc=[]

#Support Vector Machine Classifier
O_IEEE14_SVM_acc=[]
O_IEEE14_SVM_pre=[]
O_IEEE14_SVM_rec=[]
O_IEEE14_SVM_fm=[]
O_IEEE14_SVM_jac=[]
O_IEEE14_SVM_gem=[]
O_IEEE14_SVM_mcc=[]

#Random Forest Classifer
O_IEEE14_RF_acc=[]
O_IEEE14_RF_pre=[]
O_IEEE14_RF_rec=[]
O_IEEE14_RF_fm=[]
O_IEEE14_RF_jac=[]
O_IEEE14_RF_gem=[]
O_IEEE14_RF_mcc=[]

#Gradient Boosting Classifer
O_IEEE14_GB_acc=[]
O_IEEE14_GB_pre=[]
O_IEEE14_GB_rec=[]
O_IEEE14_GB_fm=[]
O_IEEE14_GB_jac=[]
O_IEEE14_GB_gem=[]
O_IEEE14_GB_mcc=[]

### Reading Data
X=pd.read_csv('Dataset_IEEE14.csv')
change_to_int(X, 'label')
y=y=X['label']

### Data Pprocessing
X=X.fillna(-1)
names=X.columns
scalar=preprocessing.MinMaxScaler()
X=scalar.fit_transform(X)
X=pd.DataFrame(X,columns=names)
X=X.drop(['label'],axis=1)
X=np.array(X)


### Run forloop (10-Fold Cross Validation)
i=0
cv = KFold(10, True, 1)
input_fin=34

for train, test in cv.split(X):
    X_train, X_test, y_train, y_test = X[train], X[test], y[train], y[test]
    Normal=X_train[y_train==0]
    Attack=X_train[y_train==1]
    y_train2 = to_categorical(y_train,num_classes=2)
    y_test2 = to_categorical(y_test,num_classes=2)
## Feed Results to Classifiers

    #DNN Classifier :
    SAE=Basic_Neural_Network(X=X_train,Y=y_train2,XV=X_test,YV=y_test2)
    k1=SAE.predict(X_test)
    p=np.zeros(k1.shape[0])
    for i in range(k1.shape[0]):
        tmp=max(k1[i,0],k1[i,1])
        if k1[i,0]==tmp:
            p[i]=0
        if k1[i,1]==tmp:
            p[i]=1
    #Decision Tree Classifer
    pca = PCA(n_components = 4)
    Xtr2 = pca.fit_transform(X_train)
    Xte2= pca.transform(X_test)
    clf = DecisionTreeClassifier()
    clf = clf.fit(Xtr2,y_train)
    p1 = clf.predict(Xte2)
    #Adaboost Classifer
    Ada = AdaBoostClassifier(n_estimators=5)
    Ada = Ada.fit(X_train, y_train)
    p2 = Ada.predict(X_test)
    #Support Vector Machine Classifer
    SVM = SVC(random_state=0, tol=1e-1)
    SVM = SVM.fit(X_train, y_train)
    p3 = SVM.predict(X_test)
    ### Feed Results to Random Forest Classifer
    RF = RandomForestClassifier(n_estimators=15, max_depth=1,random_state=0)
    RF.fit(X_train, y_train)
    p4 = RF.predict(X_test)
    #Gradient Boosting Classifer
    GB = GradientBoostingClassifier(n_estimators=9, max_features=1, max_depth=1, random_state=0)
    GB.fit(X_train, y_train)
    p5 = GB.predict(X_test)

    ##Display results for each classifier
    #Deep Neural Network Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-DNN %f" %accuracy_score(y_test, p))
    print("Precision-DNN (macro): %f" % precision_score(y_test, p, average='macro'))
    print("Recall-DNN (macro): %f" % recall_score(y_test, p, average='macro'))
    print("F1 score-DNN (macro): %f" % f1_score(y_test, p, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p))

    #Decision Tree Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-DT %f" %accuracy_score(y_test, p1))
    print("Precision-DT (macro): %f" % precision_score(y_test, p1, average='macro'))
    print("Recall-DT (macro): %f" % recall_score(y_test, p1, average='macro'))
    print("F1 score-DT (macro): %f" % f1_score(y_test, p1, average='macro'))
    print("Jaccard Score-DT(macro):%f"%jaccard_similarity_score(y_test,p1))
    print("Geometric Mean Score-DT(macro):%f"%geometric_mean_score(y_test,p1, average='macro'))
    print("Matthews Correlation Coefficient-DT(macro):%f"%matthews_corrcoef(y_test, p1))

    #Adaboost Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-ADA: %f" %accuracy_score(y_test, p2))
    print("Precision-ADA (macro): %f" % precision_score(y_test, p2, average='macro'))
    print("Recall-ADA (macro): %f" % recall_score(y_test, p2, average='macro'))
    print("F1 score-ADA (macro): %f" % f1_score(y_test, p2, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p2))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p2, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p2))

    #Support Vector Machine Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-SVM: %f" %accuracy_score(y_test, p3))
    print("Precision-SVM (macro): %f" % precision_score(y_test, p3, average='macro'))
    print("Recall-SVM (macro): %f" % recall_score(y_test, p3, average='macro'))
    print("F1 score-SVM (macro): %f" % f1_score(y_test, p3, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p3))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p3, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p3))

    #Random Forest Classifer
    print("i:"+ str(i))
    i+=1
    print("Accuracy-RF: %f" %accuracy_score(y_test, p4))
    print("Precision-RF (macro): %f" % precision_score(y_test, p4, average='macro'))
    print("Recall-RF (macro): %f" % recall_score(y_test, p4, average='macro'))
    print("F1 score-RF (macro): %f" % f1_score(y_test, p4, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p4))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p4, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p4))

    #Gradient Boosting Classifer
    print("i:"+ str(i))
    i+=1
    print("Accuracy-GB: %f" %accuracy_score(y_test, p5))
    print("Precision-GB (macro): %f" % precision_score(y_test, p5, average='macro'))
    print("Recall-GB (macro): %f" % recall_score(y_test, p5, average='macro'))
    print("F1 score-GB (macro): %f" % f1_score(y_test, p5, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p5))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p5, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p5))

    # Add final results to lists (using columns defined earlier)
    #Deep Neural Network Classifier
    O_IEEE14_DNN_acc.append(accuracy_score(y_test, p))
    O_IEEE14_DNN_fm.append(f1_score(y_test, p, average='macro'))
    O_IEEE14_DNN_rec.append(recall_score(y_test, p, average='macro'))
    O_IEEE14_DNN_pre.append(precision_score(y_test, p, average='macro'))
    O_IEEE14_DNN_jac.append(jaccard_similarity_score(y_test,p))
    O_IEEE14_DNN_gem.append(geometric_mean_score(y_test,p, average='macro'))
    O_IEEE14_DNN_mcc.append(matthews_corrcoef(y_test,p))

    #Decision Tree Classifier
    O_IEEE14_DT_acc.append(accuracy_score(y_test, p1))
    O_IEEE14_DT_fm.append(f1_score(y_test, p1, average='macro'))
    O_IEEE14_DT_rec.append(recall_score(y_test, p1, average='macro'))
    O_IEEE14_DT_pre.append(precision_score(y_test, p1, average='macro'))
    O_IEEE14_DT_jac.append(jaccard_similarity_score(y_test,p1))
    O_IEEE14_DT_gem.append(geometric_mean_score(y_test,p1, average='macro'))
    O_IEEE14_DT_mcc.append(matthews_corrcoef(y_test,p1))

    #Adaboost Classifier
    O_IEEE14_ADA_acc.append(accuracy_score(y_test, p2))
    O_IEEE14_ADA_fm.append(f1_score(y_test, p2, average='macro'))
    O_IEEE14_ADA_rec.append(recall_score(y_test, p2, average='macro'))
    O_IEEE14_ADA_pre.append(precision_score(y_test, p2, average='macro'))
    O_IEEE14_ADA_jac.append(jaccard_similarity_score(y_test,p2))
    O_IEEE14_ADA_gem.append(geometric_mean_score(y_test,p2, average='macro'))
    O_IEEE14_ADA_mcc.append(matthews_corrcoef(y_test,p2))

    #Support Vector Machine Classifier
    O_IEEE14_SVM_acc.append(accuracy_score(y_test, p3))
    O_IEEE14_SVM_fm.append(f1_score(y_test, p3, average='macro'))
    O_IEEE14_SVM_rec.append(recall_score(y_test, p3, average='macro'))
    O_IEEE14_SVM_pre.append(precision_score(y_test, p3, average='macro'))
    O_IEEE14_SVM_jac.append(jaccard_similarity_score(y_test,p3))
    O_IEEE14_SVM_gem.append(geometric_mean_score(y_test,p3, average='macro'))
    O_IEEE14_SVM_mcc.append(matthews_corrcoef(y_test,p3))

    #Random Forest Classifer
    O_IEEE14_RF_acc.append(accuracy_score(y_test, p4))
    O_IEEE14_RF_fm.append(f1_score(y_test, p4, average='macro'))
    O_IEEE14_RF_rec.append(recall_score(y_test, p4, average='macro'))
    O_IEEE14_RF_pre.append(precision_score(y_test, p4, average='macro'))
    O_IEEE14_RF_jac.append(jaccard_similarity_score(y_test,p4))
    O_IEEE14_RF_gem.append(geometric_mean_score(y_test,p4, average='macro'))
    O_IEEE14_RF_mcc.append(matthews_corrcoef(y_test,p4))

    #Gradient Boosting Classifer
    O_IEEE14_GB_acc.append(accuracy_score(y_test, p5))
    O_IEEE14_GB_fm.append(f1_score(y_test, p5, average='macro'))
    O_IEEE14_GB_rec.append(recall_score(y_test, p5, average='macro'))
    O_IEEE14_GB_pre.append(precision_score(y_test, p5, average='macro'))
    O_IEEE14_GB_jac.append(jaccard_similarity_score(y_test,p5))
    O_IEEE14_GB_gem.append(geometric_mean_score(y_test,p5, average='macro'))
    O_IEEE14_GB_mcc.append(matthews_corrcoef(y_test,p5))

### Saving Final Results to a CSV file
df = pd.DataFrame({
    #DNN
    'Accuracy-DNN': O_IEEE14_DNN_acc,
    'F1 Measure-DNN': O_IEEE14_DNN_fm,
    'Recall-DNN': O_IEEE14_DNN_rec,
    'Precision-DNN': O_IEEE14_DNN_pre,
    'Jaccard Score-DNN': O_IEEE14_DNN_jac,
    'Geometric Mean Score-DNN': O_IEEE14_DNN_gem,
    'Matthews Correlation Coefficient-DNN': O_IEEE14_DNN_mcc,
    #SVM
    'Accuracy-SVM': O_IEEE14_SVM_acc,
    'F1 Measure-SVM': O_IEEE14_SVM_fm,
    'Recall-SVM': O_IEEE14_SVM_rec,
    'Precision-SVM': O_IEEE14_SVM_pre,
    'Jaccard Score-SVM': O_IEEE14_SVM_jac,
    'Geometric Mean Score-SVM': O_IEEE14_SVM_gem,
    'Matthews Correlation Coefficient-SVM': O_IEEE14_SVM_mcc,
    #DT
    'Accuracy-DT': O_IEEE14_DT_acc,
    'F1 Measure-DT': O_IEEE14_DT_fm,
    'Recall-DT': O_IEEE14_DT_rec,
    'Precision-DT': O_IEEE14_DT_pre,
    'Jaccard Score-DT': O_IEEE14_DT_jac,
    'Geometric Mean Score-DT': O_IEEE14_DT_gem,
    'Matthews Correlation Coefficient-DT': O_IEEE14_DT_mcc,
    #ADA
    'Accuracy-ADA': O_IEEE14_ADA_acc,
    'F1 Measure-ADA': O_IEEE14_ADA_fm,
    'Recall-ADA': O_IEEE14_ADA_rec,
    'Precision-ADA': O_IEEE14_ADA_pre,
    'Jaccard Score-ADA': O_IEEE14_ADA_jac,
    'Geometric Mean Score-ADA': O_IEEE14_ADA_gem,
    'Matthews Correlation Coefficient-ADA': O_IEEE14_ADA_mcc,
    #GB
    'Accuracy-GB': O_IEEE14_GB_acc,
    'F1 Measure-GB': O_IEEE14_GB_fm,
    'Recall-GB': O_IEEE14_GB_rec,
    'Precision-GB': O_IEEE14_GB_pre,
    'Jaccard Score-GB': O_IEEE14_GB_jac,
    'Geometric Mean Score-GB': O_IEEE14_GB_gem,
    'Matthews Correlation Coefficient-GB': O_IEEE14_GB_mcc,
    #RF
    'Accuracy-RF': O_IEEE14_RF_acc,
    'F1 Measure-RF': O_IEEE14_RF_fm,
    'Recall-RF': O_IEEE14_RF_rec,
    'Precision-RF': O_IEEE14_RF_pre,
    'Jaccard Score-RF': O_IEEE14_RF_jac,
    'Geometric Mean Score-RF': O_IEEE14_RF_gem,
    'Matthews Correlation Coefficient-RF': O_IEEE14_RF_mcc,
})
export_csv = df.to_csv('Results_O_IEEE14.csv', index = None, header=True)



## Define Columns for " Basic Classifiers for IEEE57" resutls

#Deep Neural Network Classifier
O_IEEE57_DNN_acc=[]
O_IEEE57_DNN_pre=[]
O_IEEE57_DNN_rec=[]
O_IEEE57_DNN_fm=[]
O_IEEE57_DNN_jac=[]
O_IEEE57_DNN_gem=[]
O_IEEE57_DNN_mcc=[]

#Decision Tree Classifier
O_IEEE57_DT_acc=[]
O_IEEE57_DT_pre=[]
O_IEEE57_DT_rec=[]
O_IEEE57_DT_fm=[]
O_IEEE57_DT_jac=[]
O_IEEE57_DT_gem=[]
O_IEEE57_DT_mcc=[]

#Adaboost Classifier
O_IEEE57_ADA_acc=[]
O_IEEE57_ADA_pre=[]
O_IEEE57_ADA_rec=[]
O_IEEE57_ADA_fm=[]
O_IEEE57_ADA_jac=[]
O_IEEE57_ADA_gem=[]
O_IEEE57_ADA_mcc=[]

#Support Vector Machine Classifier
O_IEEE57_SVM_acc=[]
O_IEEE57_SVM_pre=[]
O_IEEE57_SVM_rec=[]
O_IEEE57_SVM_fm=[]
O_IEEE57_SVM_jac=[]
O_IEEE57_SVM_gem=[]
O_IEEE57_SVM_mcc=[]

#Random Forest Classifer
O_IEEE57_RF_acc=[]
O_IEEE57_RF_pre=[]
O_IEEE57_RF_rec=[]
O_IEEE57_RF_fm=[]
O_IEEE57_RF_jac=[]
O_IEEE57_RF_gem=[]
O_IEEE57_RF_mcc=[]

#Gradient Boosting Classifer
O_IEEE57_GB_acc=[]
O_IEEE57_GB_pre=[]
O_IEEE57_GB_rec=[]
O_IEEE57_GB_fm=[]
O_IEEE57_GB_jac=[]
O_IEEE57_GB_gem=[]
O_IEEE57_GB_mcc=[]

### Reading Data
X=pd.read_csv('Dataset_IEEE57.csv')
change_to_int(X, 'label')
y=y=X['label']

### Data Pprocessing
X=X.fillna(-1)
names=X.columns
scalar=preprocessing.MinMaxScaler()
X=scalar.fit_transform(X)
X=pd.DataFrame(X,columns=names)
X=X.drop(['label'],axis=1)
X=np.array(X)


### Run forloop (10-Fold Cross Validation)
i=0
cv = KFold(10, True, 1)
input_fin=137

for train, test in cv.split(X):
    X_train, X_test, y_train, y_test = X[train], X[test], y[train], y[test]
    Normal=X_train[y_train==0]
    Attack=X_train[y_train==1]
    y_train2 = to_categorical(y_train,num_classes=2)
    y_test2 = to_categorical(y_test,num_classes=2)
## Feed Results to Classifiers

    #DNN Classifier :
    SAE=Basic_Neural_Network(X=X_train,Y=y_train2,XV=X_test,YV=y_test2)
    k1=SAE.predict(X_test)
    p=np.zeros(k1.shape[0])
    for i in range(k1.shape[0]):
        tmp=max(k1[i,0],k1[i,1])
        if k1[i,0]==tmp:
            p[i]=0
        if k1[i,1]==tmp:
            p[i]=1
    #Decision Tree Classifer
    pca = PCA(n_components = 4)
    Xtr2 = pca.fit_transform(X_train)
    Xte2= pca.transform(X_test)
    clf = DecisionTreeClassifier()
    clf = clf.fit(Xtr2,y_train)
    p1 = clf.predict(Xte2)
    #Adaboost Classifer
    Ada = AdaBoostClassifier(n_estimators=7)
    Ada = Ada.fit(X_train, y_train)
    p2 = Ada.predict(X_test)
    #Support Vector Machine Classifer
    SVM = SVC()
    SVM = SVM.fit(X_train, y_train)
    p3 = SVM.predict(X_test)
    ### Feed Results to Random Forest Classifer
    RF = RandomForestClassifier(n_estimators=30, max_depth=4,random_state=0)
    RF.fit(X_train, y_train)
    p4 = RF.predict(X_test)
    #Gradient Boosting Classifer
    GB = GradientBoostingClassifier(n_estimators=37, max_features=2, max_depth=3, random_state=0)
    GB.fit(X_train, y_train)
    p5 = GB.predict(X_test)

    ##Display results for each classifier
    #Deep Neural Network Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-DNN %f" %accuracy_score(y_test, p))
    print("Precision-DNN (macro): %f" % precision_score(y_test, p, average='macro'))
    print("Recall-DNN (macro): %f" % recall_score(y_test, p, average='macro'))
    print("F1 score-DNN (macro): %f" % f1_score(y_test, p, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p))

    #Decision Tree Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-DT %f" %accuracy_score(y_test, p1))
    print("Precision-DT (macro): %f" % precision_score(y_test, p1, average='macro'))
    print("Recall-DT (macro): %f" % recall_score(y_test, p1, average='macro'))
    print("F1 score-DT (macro): %f" % f1_score(y_test, p1, average='macro'))
    print("Jaccard Score-DT(macro):%f"%jaccard_similarity_score(y_test,p1))
    print("Geometric Mean Score-DT(macro):%f"%geometric_mean_score(y_test,p1, average='macro'))
    print("Matthews Correlation Coefficient-DT(macro):%f"%matthews_corrcoef(y_test, p1))

    #Adaboost Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-ADA: %f" %accuracy_score(y_test, p2))
    print("Precision-ADA (macro): %f" % precision_score(y_test, p2, average='macro'))
    print("Recall-ADA (macro): %f" % recall_score(y_test, p2, average='macro'))
    print("F1 score-ADA (macro): %f" % f1_score(y_test, p2, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p2))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p2, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p2))

    #Support Vector Machine Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-SVM: %f" %accuracy_score(y_test, p3))
    print("Precision-SVM (macro): %f" % precision_score(y_test, p3, average='macro'))
    print("Recall-SVM (macro): %f" % recall_score(y_test, p3, average='macro'))
    print("F1 score-SVM (macro): %f" % f1_score(y_test, p3, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p3))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p3, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p3))

    #Random Forest Classifer
    print("i:"+ str(i))
    i+=1
    print("Accuracy-RF: %f" %accuracy_score(y_test, p4))
    print("Precision-RF (macro): %f" % precision_score(y_test, p4, average='macro'))
    print("Recall-RF (macro): %f" % recall_score(y_test, p4, average='macro'))
    print("F1 score-RF (macro): %f" % f1_score(y_test, p4, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p4))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p4, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p4))

    #Gradient Boosting Classifer
    print("i:"+ str(i))
    i+=1
    print("Accuracy-GB: %f" %accuracy_score(y_test, p5))
    print("Precision-GB (macro): %f" % precision_score(y_test, p5, average='macro'))
    print("Recall-GB (macro): %f" % recall_score(y_test, p5, average='macro'))
    print("F1 score-GB (macro): %f" % f1_score(y_test, p5, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p5))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p5, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p5))

    # Add final results to lists (using columns defined earlier)
    #Deep Neural Network Classifier
    O_IEEE57_DNN_acc.append(accuracy_score(y_test, p))
    O_IEEE57_DNN_fm.append(f1_score(y_test, p, average='macro'))
    O_IEEE57_DNN_rec.append(recall_score(y_test, p, average='macro'))
    O_IEEE57_DNN_pre.append(precision_score(y_test, p, average='macro'))
    O_IEEE57_DNN_jac.append(jaccard_similarity_score(y_test,p))
    O_IEEE57_DNN_gem.append(geometric_mean_score(y_test,p, average='macro'))
    O_IEEE57_DNN_mcc.append(matthews_corrcoef(y_test,p))

    #Decision Tree Classifier
    O_IEEE57_DT_acc.append(accuracy_score(y_test, p1))
    O_IEEE57_DT_fm.append(f1_score(y_test, p1, average='macro'))
    O_IEEE57_DT_rec.append(recall_score(y_test, p1, average='macro'))
    O_IEEE57_DT_pre.append(precision_score(y_test, p1, average='macro'))
    O_IEEE57_DT_jac.append(jaccard_similarity_score(y_test,p1))
    O_IEEE57_DT_gem.append(geometric_mean_score(y_test,p1, average='macro'))
    O_IEEE57_DT_mcc.append(matthews_corrcoef(y_test,p1))

    #Adaboost Classifier
    O_IEEE57_ADA_acc.append(accuracy_score(y_test, p2))
    O_IEEE57_ADA_fm.append(f1_score(y_test, p2, average='macro'))
    O_IEEE57_ADA_rec.append(recall_score(y_test, p2, average='macro'))
    O_IEEE57_ADA_pre.append(precision_score(y_test, p2, average='macro'))
    O_IEEE57_ADA_jac.append(jaccard_similarity_score(y_test,p2))
    O_IEEE57_ADA_gem.append(geometric_mean_score(y_test,p2, average='macro'))
    O_IEEE57_ADA_mcc.append(matthews_corrcoef(y_test,p2))

    #Support Vector Machine Classifier
    O_IEEE57_SVM_acc.append(accuracy_score(y_test, p3))
    O_IEEE57_SVM_fm.append(f1_score(y_test, p3, average='macro'))
    O_IEEE57_SVM_rec.append(recall_score(y_test, p3, average='macro'))
    O_IEEE57_SVM_pre.append(precision_score(y_test, p3, average='macro'))
    O_IEEE57_SVM_jac.append(jaccard_similarity_score(y_test,p3))
    O_IEEE57_SVM_gem.append(geometric_mean_score(y_test,p3, average='macro'))
    O_IEEE57_SVM_mcc.append(matthews_corrcoef(y_test,p3))

    #Random Forest Classifer
    O_IEEE57_RF_acc.append(accuracy_score(y_test, p4))
    O_IEEE57_RF_fm.append(f1_score(y_test, p4, average='macro'))
    O_IEEE57_RF_rec.append(recall_score(y_test, p4, average='macro'))
    O_IEEE57_RF_pre.append(precision_score(y_test, p4, average='macro'))
    O_IEEE57_RF_jac.append(jaccard_similarity_score(y_test,p4))
    O_IEEE57_RF_gem.append(geometric_mean_score(y_test,p4, average='macro'))
    O_IEEE57_RF_mcc.append(matthews_corrcoef(y_test,p4))

    #Gradient Boosting Classifer
    O_IEEE57_GB_acc.append(accuracy_score(y_test, p5))
    O_IEEE57_GB_fm.append(f1_score(y_test, p5, average='macro'))
    O_IEEE57_GB_rec.append(recall_score(y_test, p5, average='macro'))
    O_IEEE57_GB_pre.append(precision_score(y_test, p5, average='macro'))
    O_IEEE57_GB_jac.append(jaccard_similarity_score(y_test,p5))
    O_IEEE57_GB_gem.append(geometric_mean_score(y_test,p5, average='macro'))
    O_IEEE57_GB_mcc.append(matthews_corrcoef(y_test,p5))

### Saving Final Results to a CSV file
df = pd.DataFrame({
    #DNN
    'Accuracy-DNN': O_IEEE57_DNN_acc,
    'F1 Measure-DNN': O_IEEE57_DNN_fm,
    'Recall-DNN': O_IEEE57_DNN_rec,
    'Precision-DNN': O_IEEE57_DNN_pre,
    'Jaccard Score-DNN': O_IEEE57_DNN_jac,
    'Geometric Mean Score-DNN': O_IEEE57_DNN_gem,
    'Matthews Correlation Coefficient-DNN': O_IEEE57_DNN_mcc,
    #SVM
    'Accuracy-SVM': O_IEEE57_SVM_acc,
    'F1 Measure-SVM': O_IEEE57_SVM_fm,
    'Recall-SVM': O_IEEE57_SVM_rec,
    'Precision-SVM': O_IEEE57_SVM_pre,
    'Jaccard Score-SVM': O_IEEE57_SVM_jac,
    'Geometric Mean Score-SVM': O_IEEE57_SVM_gem,
    'Matthews Correlation Coefficient-SVM': O_IEEE57_SVM_mcc,
    #DT
    'Accuracy-DT': O_IEEE57_DT_acc,
    'F1 Measure-DT': O_IEEE57_DT_fm,
    'Recall-DT': O_IEEE57_DT_rec,
    'Precision-DT': O_IEEE57_DT_pre,
    'Jaccard Score-DT': O_IEEE57_DT_jac,
    'Geometric Mean Score-DT': O_IEEE57_DT_gem,
    'Matthews Correlation Coefficient-DT': O_IEEE57_DT_mcc,
    #ADA
    'Accuracy-ADA': O_IEEE57_ADA_acc,
    'F1 Measure-ADA': O_IEEE57_ADA_fm,
    'Recall-ADA': O_IEEE57_ADA_rec,
    'Precision-ADA': O_IEEE57_ADA_pre,
    'Jaccard Score-ADA': O_IEEE57_ADA_jac,
    'Geometric Mean Score-ADA': O_IEEE57_ADA_gem,
    'Matthews Correlation Coefficient-ADA': O_IEEE57_ADA_mcc,
    #GB
    'Accuracy-GB': O_IEEE57_GB_acc,
    'F1 Measure-GB': O_IEEE57_GB_fm,
    'Recall-GB': O_IEEE57_GB_rec,
    'Precision-GB': O_IEEE57_GB_pre,
    'Jaccard Score-GB': O_IEEE57_GB_jac,
    'Geometric Mean Score-GB': O_IEEE57_GB_gem,
    'Matthews Correlation Coefficient-GB': O_IEEE57_GB_mcc,
    #RF
    'Accuracy-RF': O_IEEE57_RF_acc,
    'F1 Measure-RF': O_IEEE57_RF_fm,
    'Recall-RF': O_IEEE57_RF_rec,
    'Precision-RF': O_IEEE57_RF_pre,
    'Jaccard Score-RF': O_IEEE57_RF_jac,
    'Geometric Mean Score-RF': O_IEEE57_RF_gem,
    'Matthews Correlation Coefficient-RF': O_IEEE57_RF_mcc,
})
export_csv = df.to_csv('Results_O_IEEE57.csv', index = None, header=True)

## Define Columns for " Basic Classifiers for IEEE30" resutls

#Deep Neural Network Classifier
O_IEEE30_DNN_acc=[]
O_IEEE30_DNN_pre=[]
O_IEEE30_DNN_rec=[]
O_IEEE30_DNN_fm=[]
O_IEEE30_DNN_jac=[]
O_IEEE30_DNN_gem=[]
O_IEEE30_DNN_mcc=[]

#Decision Tree Classifier
O_IEEE30_DT_acc=[]
O_IEEE30_DT_pre=[]
O_IEEE30_DT_rec=[]
O_IEEE30_DT_fm=[]
O_IEEE30_DT_jac=[]
O_IEEE30_DT_gem=[]
O_IEEE30_DT_mcc=[]

#Adaboost Classifier
O_IEEE30_ADA_acc=[]
O_IEEE30_ADA_pre=[]
O_IEEE30_ADA_rec=[]
O_IEEE30_ADA_fm=[]
O_IEEE30_ADA_jac=[]
O_IEEE30_ADA_gem=[]
O_IEEE30_ADA_mcc=[]

#Support Vector Machine Classifier
O_IEEE30_SVM_acc=[]
O_IEEE30_SVM_pre=[]
O_IEEE30_SVM_rec=[]
O_IEEE30_SVM_fm=[]
O_IEEE30_SVM_jac=[]
O_IEEE30_SVM_gem=[]
O_IEEE30_SVM_mcc=[]

#Random Forest Classifer
O_IEEE30_RF_acc=[]
O_IEEE30_RF_pre=[]
O_IEEE30_RF_rec=[]
O_IEEE30_RF_fm=[]
O_IEEE30_RF_jac=[]
O_IEEE30_RF_gem=[]
O_IEEE30_RF_mcc=[]

#Gradient Boosting Classifer
O_IEEE30_GB_acc=[]
O_IEEE30_GB_pre=[]
O_IEEE30_GB_rec=[]
O_IEEE30_GB_fm=[]
O_IEEE30_GB_jac=[]
O_IEEE30_GB_gem=[]
O_IEEE30_GB_mcc=[]

### Reading Data
X=pd.read_csv('Dataset_IEEE30.csv')
change_to_int(X, 'label')
y=y=X['label']

### Data Pprocessing
X=X.fillna(-1)
names=X.columns
scalar=preprocessing.MinMaxScaler()
X=scalar.fit_transform(X)
X=pd.DataFrame(X,columns=names)
X=X.drop(['label'],axis=1)
X=np.array(X)


### Run forloop (10-Fold Cross Validation)
i=0
cv = KFold(10, True, 1)
input_fin=137

for train, test in cv.split(X):
    X_train, X_test, y_train, y_test = X[train], X[test], y[train], y[test]
    Normal=X_train[y_train==0]
    Attack=X_train[y_train==1]
    y_train2 = to_categorical(y_train,num_classes=2)
    y_test2 = to_categorical(y_test,num_classes=2)
## Feed Results to Classifiers

    #DNN Classifier :
    SAE=Basic_Neural_Network(X=X_train,Y=y_train2,XV=X_test,YV=y_test2)
    k1=SAE.predict(X_test)
    p=np.zeros(k1.shape[0])
    for i in range(k1.shape[0]):
        tmp=max(k1[i,0],k1[i,1])
        if k1[i,0]==tmp:
            p[i]=0
        if k1[i,1]==tmp:
            p[i]=1
    #Decision Tree Classifer
    pca = PCA(n_components = 2)
    Xtr2 = pca.fit_transform(X_train)
    Xte2= pca.transform(X_test)
    clf = DecisionTreeClassifier()
    clf = clf.fit(Xtr2,y_train)
    p1 = clf.predict(Xte2)
    #Adaboost Classifer
    Ada = AdaBoostClassifier(n_estimators=2)
    Ada = Ada.fit(X_train, y_train)
    p2 = Ada.predict(X_test)
    #Support Vector Machine Classifer
    SVM = SVC()
    SVM = SVM.fit(X_train, y_train)
    p3 = SVM.predict(X_test)
    ### Feed Results to Random Forest Classifer
    RF = RandomForestClassifier(n_estimators=30, max_depth=1,random_state=0)
    RF.fit(X_train, y_train)
    p4 = RF.predict(X_test)
    #Gradient Boosting Classifer
    GB = GradientBoostingClassifier(n_estimators=37, max_features=2, max_depth=2, random_state=0)
    GB.fit(X_train, y_train)
    p5 = GB.predict(X_test)

    ##Display results for each classifier
    #Deep Neural Network Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-DNN %f" %accuracy_score(y_test, p))
    print("Precision-DNN (macro): %f" % precision_score(y_test, p, average='macro'))
    print("Recall-DNN (macro): %f" % recall_score(y_test, p, average='macro'))
    print("F1 score-DNN (macro): %f" % f1_score(y_test, p, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p))

    #Decision Tree Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-DT %f" %accuracy_score(y_test, p1))
    print("Precision-DT (macro): %f" % precision_score(y_test, p1, average='macro'))
    print("Recall-DT (macro): %f" % recall_score(y_test, p1, average='macro'))
    print("F1 score-DT (macro): %f" % f1_score(y_test, p1, average='macro'))
    print("Jaccard Score-DT(macro):%f"%jaccard_similarity_score(y_test,p1))
    print("Geometric Mean Score-DT(macro):%f"%geometric_mean_score(y_test,p1, average='macro'))
    print("Matthews Correlation Coefficient-DT(macro):%f"%matthews_corrcoef(y_test, p1))

    #Adaboost Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-ADA: %f" %accuracy_score(y_test, p2))
    print("Precision-ADA (macro): %f" % precision_score(y_test, p2, average='macro'))
    print("Recall-ADA (macro): %f" % recall_score(y_test, p2, average='macro'))
    print("F1 score-ADA (macro): %f" % f1_score(y_test, p2, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p2))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p2, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p2))

    #Support Vector Machine Classifier
    print("i:"+ str(i))
    i+=1
    print("Accuracy-SVM: %f" %accuracy_score(y_test, p3))
    print("Precision-SVM (macro): %f" % precision_score(y_test, p3, average='macro'))
    print("Recall-SVM (macro): %f" % recall_score(y_test, p3, average='macro'))
    print("F1 score-SVM (macro): %f" % f1_score(y_test, p3, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p3))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p3, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p3))

    #Random Forest Classifer
    print("i:"+ str(i))
    i+=1
    print("Accuracy-RF: %f" %accuracy_score(y_test, p4))
    print("Precision-RF (macro): %f" % precision_score(y_test, p4, average='macro'))
    print("Recall-RF (macro): %f" % recall_score(y_test, p4, average='macro'))
    print("F1 score-RF (macro): %f" % f1_score(y_test, p4, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p4))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p4, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p4))

    #Gradient Boosting Classifer
    print("i:"+ str(i))
    i+=1
    print("Accuracy-GB: %f" %accuracy_score(y_test, p5))
    print("Precision-GB (macro): %f" % precision_score(y_test, p5, average='macro'))
    print("Recall-GB (macro): %f" % recall_score(y_test, p5, average='macro'))
    print("F1 score-GB (macro): %f" % f1_score(y_test, p5, average='macro'))
    print("Jaccard Score-DNN(macro):%f"%jaccard_similarity_score(y_test,p5))
    print("Geometric Mean Score-DNN(macro):%f"%geometric_mean_score(y_test,p5, average='macro'))
    print("Matthews Correlation Coefficient-DNN(macro):%f"%matthews_corrcoef(y_test, p5))

    # Add final results to lists (using columns defined earlier)
    #Deep Neural Network Classifier
    O_IEEE30_DNN_acc.append(accuracy_score(y_test, p))
    O_IEEE30_DNN_fm.append(f1_score(y_test, p, average='macro'))
    O_IEEE30_DNN_rec.append(recall_score(y_test, p, average='macro'))
    O_IEEE30_DNN_pre.append(precision_score(y_test, p, average='macro'))
    O_IEEE30_DNN_jac.append(jaccard_similarity_score(y_test,p))
    O_IEEE30_DNN_gem.append(geometric_mean_score(y_test,p, average='macro'))
    O_IEEE30_DNN_mcc.append(matthews_corrcoef(y_test,p))

    #Decision Tree Classifier
    O_IEEE30_DT_acc.append(accuracy_score(y_test, p1))
    O_IEEE30_DT_fm.append(f1_score(y_test, p1, average='macro'))
    O_IEEE30_DT_rec.append(recall_score(y_test, p1, average='macro'))
    O_IEEE30_DT_pre.append(precision_score(y_test, p1, average='macro'))
    O_IEEE30_DT_jac.append(jaccard_similarity_score(y_test,p1))
    O_IEEE30_DT_gem.append(geometric_mean_score(y_test,p1, average='macro'))
    O_IEEE30_DT_mcc.append(matthews_corrcoef(y_test,p1))

    #Adaboost Classifier
    O_IEEE30_ADA_acc.append(accuracy_score(y_test, p2))
    O_IEEE30_ADA_fm.append(f1_score(y_test, p2, average='macro'))
    O_IEEE30_ADA_rec.append(recall_score(y_test, p2, average='macro'))
    O_IEEE30_ADA_pre.append(precision_score(y_test, p2, average='macro'))
    O_IEEE30_ADA_jac.append(jaccard_similarity_score(y_test,p2))
    O_IEEE30_ADA_gem.append(geometric_mean_score(y_test,p2, average='macro'))
    O_IEEE30_ADA_mcc.append(matthews_corrcoef(y_test,p2))

    #Support Vector Machine Classifier
    O_IEEE30_SVM_acc.append(accuracy_score(y_test, p3))
    O_IEEE30_SVM_fm.append(f1_score(y_test, p3, average='macro'))
    O_IEEE30_SVM_rec.append(recall_score(y_test, p3, average='macro'))
    O_IEEE30_SVM_pre.append(precision_score(y_test, p3, average='macro'))
    O_IEEE30_SVM_jac.append(jaccard_similarity_score(y_test,p3))
    O_IEEE30_SVM_gem.append(geometric_mean_score(y_test,p3, average='macro'))
    O_IEEE30_SVM_mcc.append(matthews_corrcoef(y_test,p3))

    #Random Forest Classifer
    O_IEEE30_RF_acc.append(accuracy_score(y_test, p4))
    O_IEEE30_RF_fm.append(f1_score(y_test, p4, average='macro'))
    O_IEEE30_RF_rec.append(recall_score(y_test, p4, average='macro'))
    O_IEEE30_RF_pre.append(precision_score(y_test, p4, average='macro'))
    O_IEEE30_RF_jac.append(jaccard_similarity_score(y_test,p4))
    O_IEEE30_RF_gem.append(geometric_mean_score(y_test,p4, average='macro'))
    O_IEEE30_RF_mcc.append(matthews_corrcoef(y_test,p4))

    #Gradient Boosting Classifer
    O_IEEE30_GB_acc.append(accuracy_score(y_test, p5))
    O_IEEE30_GB_fm.append(f1_score(y_test, p5, average='macro'))
    O_IEEE30_GB_rec.append(recall_score(y_test, p5, average='macro'))
    O_IEEE30_GB_pre.append(precision_score(y_test, p5, average='macro'))
    O_IEEE30_GB_jac.append(jaccard_similarity_score(y_test,p5))
    O_IEEE30_GB_gem.append(geometric_mean_score(y_test,p5, average='macro'))
    O_IEEE30_GB_mcc.append(matthews_corrcoef(y_test,p5))

### Saving Final Results to a CSV file
df = pd.DataFrame({
    #DNN
    'Accuracy-DNN': O_IEEE30_DNN_acc,
    'F1 Measure-DNN': O_IEEE30_DNN_fm,
    'Recall-DNN': O_IEEE30_DNN_rec,
    'Precision-DNN': O_IEEE30_DNN_pre,
    'Jaccard Score-DNN': O_IEEE30_DNN_jac,
    'Geometric Mean Score-DNN': O_IEEE30_DNN_gem,
    'Matthews Correlation Coefficient-DNN': O_IEEE30_DNN_mcc,
    #SVM
    'Accuracy-SVM': O_IEEE30_SVM_acc,
    'F1 Measure-SVM': O_IEEE30_SVM_fm,
    'Recall-SVM': O_IEEE30_SVM_rec,
    'Precision-SVM': O_IEEE30_SVM_pre,
    'Jaccard Score-SVM': O_IEEE30_SVM_jac,
    'Geometric Mean Score-SVM': O_IEEE30_SVM_gem,
    'Matthews Correlation Coefficient-SVM': O_IEEE30_SVM_mcc,
    #DT
    'Accuracy-DT': O_IEEE30_DT_acc,
    'F1 Measure-DT': O_IEEE30_DT_fm,
    'Recall-DT': O_IEEE30_DT_rec,
    'Precision-DT': O_IEEE30_DT_pre,
    'Jaccard Score-DT': O_IEEE30_DT_jac,
    'Geometric Mean Score-DT': O_IEEE30_DT_gem,
    'Matthews Correlation Coefficient-DT': O_IEEE30_DT_mcc,
    #ADA
    'Accuracy-ADA': O_IEEE30_ADA_acc,
    'F1 Measure-ADA': O_IEEE30_ADA_fm,
    'Recall-ADA': O_IEEE30_ADA_rec,
    'Precision-ADA': O_IEEE30_ADA_pre,
    'Jaccard Score-ADA': O_IEEE30_ADA_jac,
    'Geometric Mean Score-ADA': O_IEEE30_ADA_gem,
    'Matthews Correlation Coefficient-ADA': O_IEEE30_ADA_mcc,
    #GB
    'Accuracy-GB': O_IEEE30_GB_acc,
    'F1 Measure-GB': O_IEEE30_GB_fm,
    'Recall-GB': O_IEEE30_GB_rec,
    'Precision-GB': O_IEEE30_GB_pre,
    'Jaccard Score-GB': O_IEEE30_GB_jac,
    'Geometric Mean Score-GB': O_IEEE30_GB_gem,
    'Matthews Correlation Coefficient-GB': O_IEEE30_GB_mcc,
    #RF
    'Accuracy-RF': O_IEEE30_RF_acc,
    'F1 Measure-RF': O_IEEE30_RF_fm,
    'Recall-RF': O_IEEE30_RF_rec,
    'Precision-RF': O_IEEE30_RF_pre,
    'Jaccard Score-RF': O_IEEE30_RF_jac,
    'Geometric Mean Score-RF': O_IEEE30_RF_gem,
    'Matthews Correlation Coefficient-RF': O_IEEE30_RF_mcc,
})
export_csv = df.to_csv('Results_O_IEEE30.csv', index = None, header=True)

